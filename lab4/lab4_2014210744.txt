************************************************

		Lab4 Report
		
	   武通达 2014210744 电子

	  （不会用Markdown格式...）

************************************************

[练习0] 实验代码merge.

=============================================================================

[练习1]

1.1 分配并初始化一个进程控制块。

    初始化进程控制块主要是设置进程控制块中各个产量的数值。主要包含以下几大类：
	进程的id：	pid	空id，-1
			name	分配一段内存来保存名称
	进程的状态：	state	当前状态为“未初始化”
			runs	已经执行次数为0
			need_resched	未被调度/需要被调度
	进程的存储：	kstack	内核堆栈
			mm	内存空间
			tf	上下文存储空间
			cr3	页表目录项
	进程间通信：	parent	父进程
			flags	相关标签
			
代码实现如下：
/*********************************************************
    	proc->state = PROC_UNINIT;	// un initialized
    	proc->pid = -1;				// idle pid
    	proc->runs = 0;				// havn't ran before
    	proc->kstack = 0;
    	proc->need_resched = 0;
    	proc->parent = NULL;
    	proc->mm = NULL;
    	memset(&(proc->context), 0, sizeof(struct context));
    	proc->tf = NULL;
    	proc->cr3 = boot_cr3;		// physical address of boot-time page directory
    	proc->flags = 0;
    	memset(&(proc->name), 0, PROC_NAME_LEN);
*********************************************************/

===========================================================

[练习2] 为新创建的内核线程分配资源。

    和初始化很类似,分配资源主要是在初始化进程的基础上，获取id，分配对应的内存空间。
    主要的内容包括：
	初始化一个进程；
	向这个进程分配内核堆栈；
	向这个进程分配内存；
	更新新进程的id，父进程；
	复制线程；
	将进程加入hash表和进程表（应该是就绪进程表）；
		-- 答案代码中有几行其他的代码，看起来是在这个过程中去掉中断使能的。
		-- 其目的可能是保证这个步骤的完整性？
	更新表中进程数量；
	最后唤醒进程。
    

/*********************************************************
    if ((proc = alloc_proc())==NULL){
    	goto fork_out;
    }
    if (setup_kstack(proc)){
    	goto bad_fork_cleanup_proc;
    }
    if (copy_mm(proc->flags, proc) != 0){
   	goto bad_fork_cleanup_kstack;
    }
    proc->parent = current;
    proc->pid = get_pid();
    copy_thread(proc, stack, tf);
    hash_proc(proc);
    list_add(&proc_list, &(proc->list_link));
    nr_process ++;
    wakeup_proc(proc);
    ret = proc->pid;
*********************************************************/

===========================================================

[练习3] 阅读代码，理解 proc_run 和它调用的函数如何完成进程切换的。

输出结果： —— 看起来是正确的
(THU.CST) os is loading ...

Special kernel symbols:
  entry  0xc010002a (phys)
  etext  0xc010b210 (phys)
  edata  0xc0128a90 (phys)
  end    0xc012bc18 (phys)
Kernel executable memory footprint: 175KB
ebp:0xc0127f38 eip:0xc0101e6a args:0x00010094 0x00000000 0xc0127f68 0xc01000d3 
    kern/debug/kdebug.c:308: print_stackframe+21
ebp:0xc0127f48 eip:0xc0102159 args:0x00000000 0x00000000 0x00000000 0xc0127fb8 
    kern/debug/kmonitor.c:129: mon_backtrace+10
ebp:0xc0127f68 eip:0xc01000d3 args:0x00000000 0xc0127f90 0xffff0000 0xc0127f94 
    kern/init/init.c:57: grade_backtrace2+33
ebp:0xc0127f88 eip:0xc01000fc args:0x00000000 0xffff0000 0xc0127fb4 0x0000002a 
    kern/init/init.c:62: grade_backtrace1+38
ebp:0xc0127fa8 eip:0xc010011a args:0x00000000 0xc010002a 0xffff0000 0x0000001d 
    kern/init/init.c:67: grade_backtrace0+23
ebp:0xc0127fc8 eip:0xc010013f args:0xc010b23c 0xc010b220 0x00003188 0x00000000 
    kern/init/init.c:72: grade_backtrace+34
ebp:0xc0127ff8 eip:0xc010007f args:0x00000000 0x00000000 0x0000ffff 0x40cf9a00 
    kern/init/init.c:32: kern_init+84
memory management: default_pmm_manager
e820map:
  memory: 0009fc00, [00000000, 0009fbff], type = 1.
  memory: 00000400, [0009fc00, 0009ffff], type = 2.
  memory: 00010000, [000f0000, 000fffff], type = 2.
  memory: 07efe000, [00100000, 07ffdfff], type = 1.
  memory: 00002000, [07ffe000, 07ffffff], type = 2.
  memory: 00040000, [fffc0000, ffffffff], type = 2.
check_alloc_page() succeeded!
check_pgdir() succeeded!
check_boot_pgdir() succeeded!
-------------------- BEGIN --------------------
PDE(0e0) c0000000-f8000000 38000000 urw
  |-- PTE(38000) c0000000-f8000000 38000000 -rw
PDE(001) fac00000-fb000000 00400000 -rw
  |-- PTE(000e0) faf00000-fafe0000 000e0000 urw
  |-- PTE(00001) fafeb000-fafec000 00001000 -rw
--------------------- END ---------------------
use SLOB allocator
check_slab() success
kmalloc_init() succeeded!
check_vma_struct() succeeded!
page fault at 0x00000100: K/W [no page found].
check_pgfault() succeeded!
check_vmm() succeeded.
ide 0:      10000(sectors), 'QEMU HARDDISK'.
ide 1:     262144(sectors), 'QEMU HARDDISK'.
SWAP: manager = fifo swap manager
BEGIN check_swap: count 31950, total 31950
setup Page Table for vaddr 0X1000, so alloc a page
setup Page Table vaddr 0~4MB OVER!
set up init env for check_swap begin!
page fault at 0x00001000: K/W [no page found].
page fault at 0x00002000: K/W [no page found].
page fault at 0x00003000: K/W [no page found].
page fault at 0x00004000: K/W [no page found].
set up init env for check_swap over!
write Virt Page c in fifo_check_swap
write Virt Page a in fifo_check_swap
write Virt Page d in fifo_check_swap
write Virt Page b in fifo_check_swap
write Virt Page e in fifo_check_swap
page fault at 0x00005000: K/W [no page found].
swap_out: i 0, store page in vaddr 0x1000 to disk swap entry 2
write Virt Page b in fifo_check_swap
write Virt Page a in fifo_check_swap
page fault at 0x00001000: K/W [no page found].
swap_out: i 0, store page in vaddr 0x2000 to disk swap entry 3
swap_in: load disk swap entry 2 with swap_page in vadr 0x1000
write Virt Page b in fifo_check_swap
page fault at 0x00002000: K/W [no page found].
swap_out: i 0, store page in vaddr 0x3000 to disk swap entry 4
swap_in: load disk swap entry 3 with swap_page in vadr 0x2000
write Virt Page c in fifo_check_swap
page fault at 0x00003000: K/W [no page found].
swap_out: i 0, store page in vaddr 0x4000 to disk swap entry 5
swap_in: load disk swap entry 4 with swap_page in vadr 0x3000
write Virt Page d in fifo_check_swap
page fault at 0x00004000: K/W [no page found].
swap_out: i 0, store page in vaddr 0x5000 to disk swap entry 6
swap_in: load disk swap entry 5 with swap_page in vadr 0x4000
count is 5, total is 5
check_swap() succeeded!
++ setup timer interrupts
this initproc, pid = 1, name = "init"
To U: "Hello world!!".
To U: "en.., Bye, Bye. :)"
kernel panic at kern/process/proc.c:346:
    process exit!!.

Welcome to the kernel debug monitor!!
Type 'help' for a list of commands.

    







